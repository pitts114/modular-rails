name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [ master ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install Bundler
        run: gem install bundler

      - name: Print Ruby and Bundler environment info
        run: |
          ruby -v
          gem env
          bundle env

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: |
          set -e
          bundle install
          for engine in engines/*; do
            if [ -d "$engine/app" ]; then
              echo "Running Brakeman on $engine"
              (cd "$engine" && bundle exec brakeman --no-pager)
            fi
          done

  scan_js:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bin/importmap audit

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17.5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config google-chrome-stable

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Print Ruby and Bundler environment info
        run: |
          ruby -v
          gem env
          bundle env

      - name: Install Node.js and Yarn
        run: |
          sudo apt-get update
          sudo apt-get install -y nodejs npm
          sudo npm install -g yarn

      - name: Install Chrome (if not already installed)
        run: |
          if ! command -v google-chrome-stable > /dev/null; then
            wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
            sudo apt-get update
            sudo apt-get install -y google-chrome-stable
          fi

      - name: Install JS dependencies
        run: |
          if [ -f package.json ]; then
            yarn install --frozen-lockfile || npm install
          fi

      - name: Verify bundle install
        run: bundle check || bundle install

      - name: Run engine specs
        env:
          RAILS_ENV: test
          REDIS_URL: redis://localhost:6379/
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: modular_rails_test
        run: |
          bin/rails db:schema:load
          bin/rails db:test:prepare
          bundle exec rspec
          bundle exec rake engine_specs

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore
